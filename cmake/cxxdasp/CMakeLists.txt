#
#    Copyright (C) 2014 Haruki Hasegawa
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

set(LIB_CXXDASP_INCLUDE_DIR ${CXXDASP_TOP_DIR}/include)
set(LIB_CXXDASP_INTERNAL_INCLUDE_DIR ${CXXDASP_TOP_DIR}/generated_source)

# NOTE: these direcoty list can be generated by "find source -type d" command
aux_source_directory(${CXXDASP_TOP_DIR}/source LIB_CXXDASP_SOURCES)
aux_source_directory(${CXXDASP_TOP_DIR}/source/utils LIB_CXXDASP_SOURCES)
aux_source_directory(${CXXDASP_TOP_DIR}/source/resampler LIB_CXXDASP_SOURCES)
aux_source_directory(${CXXDASP_TOP_DIR}/source/resampler/smart LIB_CXXDASP_SOURCES)
aux_source_directory(${CXXDASP_TOP_DIR}/source/resampler/polyphase LIB_CXXDASP_SOURCES)
aux_source_directory(${CXXDASP_TOP_DIR}/source/memory LIB_CXXDASP_SOURCES)
aux_source_directory(${CXXDASP_TOP_DIR}/source/filter LIB_CXXDASP_SOURCES)
aux_source_directory(${CXXDASP_TOP_DIR}/source/filter/biquad LIB_CXXDASP_SOURCES)
aux_source_directory(${CXXDASP_TOP_DIR}/source/filter/cascaded_biquad LIB_CXXDASP_SOURCES)
aux_source_directory(${CXXDASP_TOP_DIR}/source/filter/tsvf LIB_CXXDASP_SOURCES)
aux_source_directory(${CXXDASP_TOP_DIR}/source/converter LIB_CXXDASP_SOURCES)
aux_source_directory(${CXXDASP_TOP_DIR}/source/mixer LIB_CXXDASP_SOURCES)
aux_source_directory(${CXXDASP_TOP_DIR}/source/window LIB_CXXDASP_SOURCES)

include_directories(
    ${LIB_CXXDASP_INCLUDE_DIR}
    ${LIB_CXXDASP_INTERNAL_INCLUDE_DIR})

add_definitions(${LIB_CXXDASP_AND_DEP_LIBS_DEFINITIONS})

add_library(cxxdasp STATIC ${LIB_CXXDASP_SOURCES})

target_include_directories(cxxdasp
    PUBLIC $<BUILD_INTERFACE:${LIB_CXXDASP_INCLUDE_DIR}>
    PRIVATE $<BUILD_INTERFACE:${LIB_CXXDASP_INTERNAL_INCLUDE_DIR}>
)

### cxxporthelper
target_link_libraries(cxxdasp cxxporthelper)
target_include_directories(cxxdasp PUBLIC $<TARGET_PROPERTY:cxxporthelper,INTERFACE_INCLUDE_DIRECTORIES_NO_EXIST_CHECK>)

### single-precision FFT
if (${CXXDASP_CONFIG_USE_FFT_BACKEND_PFFFT})
    target_link_libraries(cxxdasp pffft)
    target_include_directories(cxxdasp PUBLIC $<TARGET_PROPERTY:pffft,INTERFACE_INCLUDE_DIRECTORIES>)
    target_compile_definitions(cxxdasp INTERFACE -DCXXDASP_USE_FFT_BACKEND_PFFFT=1)
endif()

if (${CXXDASP_CONFIG_USE_FFT_BACKEND_FFTS})
    target_link_libraries(cxxdasp ffts)
    target_include_directories(cxxdasp PUBLIC $<TARGET_PROPERTY:ffts,INTERFACE_INCLUDE_DIRECTORIES_NO_EXIST_CHECK>)
    target_compile_definitions(cxxdasp INTERFACE -DCXXDASP_USE_FFT_BACKEND_FFTS=1)
endif()

if (${CXXDASP_CONFIG_USE_FFT_BACKEND_KISS_FFT})
    target_link_libraries(cxxdasp kiss_fft)
    target_include_directories(cxxdasp PUBLIC $<TARGET_PROPERTY:kiss_fft,INTERFACE_INCLUDE_DIRECTORIES>)
    target_compile_definitions(cxxdasp INTERFACE -DCXXDASP_USE_FFT_BACKEND_KISS_FFT=1)
endif()

if (${CXXDASP_CONFIG_USE_FFT_BACKEND_FFTWF})
    target_link_libraries(cxxdasp fftwf)
    target_include_directories(cxxdasp PUBLIC $<TARGET_PROPERTY:fftwf,INTERFACE_INCLUDE_DIRECTORIES_NO_EXIST_CHECK>)
    target_compile_definitions(cxxdasp INTERFACE -DCXXDASP_USE_FFT_BACKEND_FFTWF=1)
endif()

if (${CXXDASP_CONFIG_USE_FFT_BACKEND_NE10})
    target_link_libraries(cxxdasp ne10)
    target_include_directories(cxxdasp PUBLIC $<TARGET_PROPERTY:ne10,INTERFACE_INCLUDE_DIRECTORIES_NO_EXIST_CHECK>)
    target_compile_definitions(cxxdasp INTERFACE -DCXXDASP_USE_FFT_BACKEND_NE10=1)
endif()

if (${CXXDASP_CONFIG_USE_FFT_BACKEND_CKFFT})
    target_link_libraries(cxxdasp ckfft)
    target_include_directories(cxxdasp PUBLIC $<TARGET_PROPERTY:ckfft,INTERFACE_INCLUDE_DIRECTORIES_NO_EXIST_CHECK>)
    target_compile_definitions(cxxdasp INTERFACE -DCXXDASP_USE_FFT_BACKEND_CKFFT=1)
endif()

if (${CXXDASP_CONFIG_USE_FFT_BACKEND_MUFFT})
    target_link_libraries(cxxdasp mufft)
    target_include_directories(cxxdasp PUBLIC $<TARGET_PROPERTY:mufft,INTERFACE_INCLUDE_DIRECTORIES_NO_EXIST_CHECK>)
    target_compile_definitions(cxxdasp INTERFACE -DCXXDASP_USE_FFT_BACKEND_MUFFT=1)
endif()

### double-precision FFT
if (${CXXDASP_CONFIG_USE_FFT_BACKEND_GP_FFT})
    target_link_libraries(cxxdasp gp_fft)
    target_include_directories(cxxdasp PUBLIC $<TARGET_PROPERTY:gp_fft,INTERFACE_INCLUDE_DIRECTORIES>)
    target_compile_definitions(cxxdasp INTERFACE -DCXXDASP_USE_FFT_BACKEND_GP_FFT=1)
endif()

if (${CXXDASP_CONFIG_USE_FFT_BACKEND_FFTW})
    target_link_libraries(cxxdasp fftw)
    target_include_directories(cxxdasp PUBLIC $<TARGET_PROPERTY:fftw,INTERFACE_INCLUDE_DIRECTORIES_NO_EXIST_CHECK>)
    target_compile_definitions(cxxdasp INTERFACE -DCXXDASP_USE_FFT_BACKEND_FFTW=1)
endif()

#
# Export properties
#
# set_property(GLOBAL PROPERTY LIB_CXXDASP_INCLUDE_DIRS ${LIB_CXXDASP_INCLUDE_DIR})
set_property(GLOBAL PROPERTY LIB_CXXDASP_LIBRARY_DIRS ${CMAKE_CURRENT_BINARY_DIR})

set_property(GLOBAL APPEND PROPERTY LIB_CXXDASP_AND_DEP_LIBS_TARGETS cxxdasp)
# set_property(GLOBAL APPEND PROPERTY LIB_CXXDASP_AND_DEP_LIBS_INCLUDE_DIRS ${LIB_CXXDASP_INCLUDE_DIR})
set_property(GLOBAL APPEND PROPERTY LIB_CXXDASP_AND_DEP_LIBS_LINK_DIRS ${CMAKE_CURRENT_BINARY_DIR})
set_property(GLOBAL APPEND PROPERTY LIB_CXXDASP_AND_DEP_LIBS_LIBRARIES libcxxdasp.a)
